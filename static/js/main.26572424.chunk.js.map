{"version":3,"sources":["components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","state","selectedType","dichotomiesTable","functionsTable","types","type","functions","dichotomies","dicho1","dicho2","places","description1","description2","getFunctions","list","dicho","map","list2","index","showTypeFunctions","Table","bordered","colspan","slice","showTypeDichotomies","getInitialState","selectedOption","handleOptionChange","changeEvent","setState","target","value","console","log","className","class","Form","FormGroup","Label","for","this","CustomInput","id","label","checked","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26572424.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  CardDeck,\r\n  Col,\r\n  Button,\r\n  Form, \r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Table\r\n} from \"reactstrap\";\r\n\r\nclass Data extends Component {\r\n  // adds inbuilt data\r\n  constructor(props) {\r\n    super(props);\r\n  \r\n    this.state = {\r\n      selectedType: [],\r\n      dichotomiesTable: [],\r\n      functionsTable: [],\r\n      types: [\r\n          {\r\n            type: \"LII\",\r\n            functions: [\"Ti\", \"Ni\", \"Fi\", \"Si\", \"Ne\", \"Fe\", \"Se\", \"Te\"],\r\n          },{\r\n            type: \"ILE\",\r\n            functions: [\"Ne\", \"Te\", \"Se\", \"Fe\", \"Ti\", \"Si\", \"Fi\", \"Ni\"],\r\n          },{\r\n            type: \"SEI\",\r\n            functions: [\"Si\", \"Fi\", \"Ni\", \"Ti\", \"Fe\", \"Ne\", \"Te\", \"Se\"],\r\n          },{\r\n            type: \"ESE\",\r\n            functions: [\"Fe\", \"Se\", \"Te\", \"Ne\", \"Si\", \"Ti\", \"Ni\", \"Fi\"],\r\n          },{\r\n            type: \"LSI\",\r\n            functions: [\"Ti\", \"Si\", \"Fi\", \"Ni\", \"Se\", \"Fe\", \"Ne\", \"Te\"],\r\n          },{\r\n            type: \"SLE\",\r\n            functions: [\"Se\", \"Te\", \"Ne\", \"Fe\", \"Ti\", \"Ni\", \"Fi\", \"Si\"],\r\n          },{\r\n            type: \"IEI\",\r\n            functions: [\"Ni\", \"Fi\", \"Si\", \"Ti\", \"Fe\", \"Se\", \"Te\", \"Ne\"],\r\n          },{\r\n            type: \"EIE\",\r\n            functions: [\"Fe\", \"Ne\", \"Te\", \"Se\", \"Ni\", \"Ti\", \"Si\", \"Fi\"],\r\n          },{\r\n            type: \"ILI\",\r\n            functions: [\"Ni\", \"Ti\", \"Si\", \"Fi\", \"Te\", \"Se\", \"Fe\", \"Ne\"],\r\n          },{\r\n            type: \"LIE\",\r\n            functions: [\"Te\", \"Ne\", \"Fe\", \"Se\", \"Ni\", \"Fi\", \"Si\", \"Ti\"],\r\n          },{\r\n            type: \"ESI\",\r\n            functions: [\"Fi\", \"Si\", \"Ti\", \"Ni\", \"Se\", \"Te\", \"Ni\", \"Fe\"],\r\n          },{\r\n            type: \"SEE\",\r\n            functions: [\"Se\", \"Fe\", \"Ne\", \"Te\", \"Fi\", \"Ni\", \"Ti\", \"Si\"],\r\n          },{\r\n            type: \"SLI\",\r\n            functions: [\"Si\", \"Ti\", \"Ni\", \"Fi\", \"Te\", \"Ne\", \"Fe\", \"Se\"],\r\n          },{\r\n            type: \"LSE\",\r\n            functions: [\"Te\", \"Se\", \"Fe\", \"Ne\", \"Si\", \"Fi\", \"Ni\", \"Ti\"],\r\n          },{\r\n            type: \"EII\",\r\n            functions: [\"Fi\", \"Ni\", \"Ti\", \"Si\", \"Ne\", \"Te\", \"Si\", \"Fe\"],\r\n          },{\r\n            type: \"IEE\",\r\n            functions: [\"Ne\", \"Fe\", \"Se\", \"Te\", \"Fi\", \"Si\", \"Ti\", \"Ni\"]\r\n          }\r\n      ],\r\n      dichotomies: [\r\n          {\r\n            dicho1: \"external\",\r\n            dicho2: \"internal\",\r\n            places: [[1, 2, 3, 4], [5, 6, 7, 8]],\r\n            description1: \"How you deal with the external world.\",\r\n            description2: \"How you behave in close distance.\"\r\n          },{\r\n            dicho1: \"values\",\r\n            dicho2: \"tools\",\r\n            places: [[1, 4, 7, 8], [2, 3, 5, 6]],\r\n            description1: \"Long term motivation, accumulates problems, lack of energy.\",\r\n            description2: \"Solves problems, excess energy.\"\r\n          },{\r\n            dicho1: \"master\",\r\n            dicho2: \"slave\",\r\n            places: [[1, 2, 5, 8], [3, 4, 6, 7]],\r\n            description1: \"Coordinates the type's activity, sends energy pulses.\",\r\n            description2: \"Follows master, receives energy pulses.\" \r\n          },{\r\n            dicho1: \"resistant\",\r\n            dicho2: \"unstable\",\r\n            places: [[1, 3, 6, 8], [2, 4, 5, 7]],\r\n            description1: \"Works stably and systematically\",\r\n            description2: \"Needs strong motivation to keep going.\"\r\n          },{\r\n            dicho1: \"automatic\",\r\n            dicho2: \"conscious\",\r\n            places: [[1, 2, 6, 7], [3, 4, 5, 8]],\r\n            description1: \"You aren't so aware of the judgements made by this function.\",\r\n            description2: \"You are aware of the judgements made by this function.\" \r\n          },{\r\n            dicho1: \"kinetic\",\r\n            dicho2: \"potential\",\r\n            places: [[1, 3, 5, 7], [2, 4, 6, 8]],\r\n            description1: \"Consumes more energy than it accumulates. Does.\",\r\n            description2: \"Accumulates energy. More prone to verbalizing instead of doing.\" \r\n          },{\r\n            dicho1: \"accelerating\",\r\n            dicho2: \"slowing\",\r\n            places: [[1, 4, 5, 6], [2, 3, 7, 8]],\r\n            description1: \"Energizes the type.\",\r\n            description2: \"De-energizes the type.\"\r\n        }\r\n      ]\r\n    };\r\n    this.state.selectedType = 0\r\n\r\n    this.getFunctions = (list, type, dicho) =>\r\n    {\r\n      return (\r\n        list.places[dicho].map((list2, index) => {\r\n          return(\r\n              this.state.types[type].functions[list2 - 1] + \" \"\r\n          );\r\n        })\r\n      )\r\n    }\r\n\r\n    this.showTypeFunctions = (index) =>\r\n    {\r\n      return (\r\n        <Table bordered>\r\n          <thead>\r\n            <tr><th colspan=\"4\">Functions</th></tr>\r\n            <tr>\r\n              <th>1</th><th>2</th><th>3</th><th>4</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr>\r\n          {\r\n            this.state.types[index].functions.slice(0,4).map((list) => {\r\n              return(\r\n              <td>{list}</td>\r\n              )})\r\n              \r\n          }\r\n          </tr>\r\n          <tr>\r\n          {\r\n            this.state.types[index].functions.slice(4,8).map((list) => {\r\n              return(\r\n                <td>{list}</td>\r\n              )})\r\n          }\r\n          </tr>\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <th>5</th><th>6</th><th>7</th><th>8</th>\r\n            </tr>\r\n          </tfoot>\r\n        </Table>\r\n      )\r\n    }\r\n    \r\n    this.showTypeDichotomies = (type) => {\r\n      return (\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>Functions</th>\r\n              <th colspan=\"2\"><center>Dichotomies</center></th>\r\n              <th>Functions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n        {\r\n          this.state.dichotomies.map((list, index) => {\r\n            return(\r\n                <tr>\r\n                  <td>\r\n                    {this.state.types[type].functions[list.places[0][0] - 1] + \" \"}\r\n                    {this.state.types[type].functions[list.places[0][1] - 1]}\r\n                    <br></br>\r\n                    {this.state.types[type].functions[list.places[0][2] - 1] + \" \"}\r\n                    {this.state.types[type].functions[list.places[0][3] - 1]}\r\n                  </td>\r\n                  <td> <b>{list.dicho1}</b> <br></br> {list.description1} </td>\r\n                  <td> <b>{list.dicho2}</b> <br></br> {list.description2} </td>\r\n                  <td>\r\n                    {this.state.types[type].functions[list.places[1][0] - 1] + \" \"}\r\n                    {this.state.types[type].functions[list.places[1][1] - 1]}\r\n                    <br></br>\r\n                    {this.state.types[type].functions[list.places[1][2] - 1] + \" \"}\r\n                    {this.state.types[type].functions[list.places[1][3] - 1]}\r\n                  </td>\r\n                </tr>\r\n            )\r\n          })\r\n        }\r\n        </tbody>\r\n        </Table>\r\n      )\r\n    }\r\n\r\n    this.getInitialState = () => {\r\n      return {\r\n        selectedOption: 0\r\n      }\r\n    }\r\n    \r\n    this.handleOptionChange = (changeEvent) => {\r\n      this.setState({\r\n        selectedType: changeEvent.target.value,\r\n        dichotomiesTable: this.showTypeDichotomies(changeEvent.target.value),\r\n        functionsTable: this.showTypeFunctions(changeEvent.target.value)\r\n      });\r\n      console.log(changeEvent.target.value);\r\n    }\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-2\">\r\n            <Form>\r\n              <FormGroup>\r\n                <Label for=\"Checkbox\">Types</Label>\r\n                <div>\r\n                {\r\n                  this.state.types.map((list, index) =>\r\n                  {\r\n                    return (\r\n                      <CustomInput type=\"radio\" id={index} value={index} label={list.type} checked={this.state.selectedType == index} onChange={this.handleOptionChange} />\r\n                    )\r\n                  })\r\n                }\r\n                </div>\r\n              </FormGroup>\r\n            </Form>\r\n          </div>\r\n          <div class=\"col-md-8\">\r\n            {this.state.functionsTable}\r\n            {this.state.dichotomiesTable}\r\n          </div>\r\n        </div>    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Data;\r\n","import React, { Component }from 'react';\nimport { CardDeck, Col, Card, CardHeader, Button, CardBody, CardText, CardFooter } from 'reactstrap';\nimport Data from './components/Data'\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Data />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}